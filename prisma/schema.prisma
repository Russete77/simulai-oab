// Simulai OAB - Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum Subject {
  ETHICS
  CONSTITUTIONAL
  CIVIL
  CIVIL_PROCEDURE
  CRIMINAL
  CRIMINAL_PROCEDURE
  LABOUR
  LABOUR_PROCEDURE
  ADMINISTRATIVE
  TAXES
  BUSINESS
  CONSUMER
  ENVIRONMENTAL
  CHILDREN
  INTERNATIONAL
  HUMAN_RIGHTS
  GENERAL
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  VERY_HARD
}

enum SimulationType {
  FULL_EXAM
  ADAPTIVE
  QUICK_PRACTICE
  ERROR_REVIEW
  BY_SUBJECT
}

enum SimulationStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum PlanType {
  FREE
  BASIC
  PRO
}

// ============================================================================
// USER & AUTHENTICATION
// ============================================================================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  clerkId       String?  @unique
  supabaseId    String?  @unique  // Temporário para migração
  planType      PlanType @default(FREE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  answers       UserAnswer[]
  simulations   Simulation[]
  profile       UserProfile?
  achievements  UserAchievement[]
  studyPlans    StudyPlan[]
  chatSessions  UserQuestionChat[]

  @@index([email])
  @@index([clerkId])
  @@index([supabaseId])
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Gamification
  totalPoints       Int      @default(0)
  level             Int      @default(1)
  streak            Int      @default(0)
  lastStudyDate     DateTime?

  // Stats
  totalQuestions    Int      @default(0)
  correctAnswers    Int      @default(0)
  averageTime       Float?

  // Study preferences
  dailyGoal         Int      @default(20)
  preferredSubjects Subject[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// ============================================================================
// QUESTIONS & ALTERNATIVES
// ============================================================================

model Question {
  id              String      @id @default(cuid())
  examId          String      // "2023-01"
  examYear        Int
  examPhase       Int         // 1 ou 2
  questionNumber  Int         // 1-100
  subject         Subject
  statement       String      @db.Text
  explanation     String?     @db.Text
  nullified       Boolean     @default(false)

  // Metadados calculados
  difficulty      Difficulty?
  averageTime     Float?
  successRate     Float?

  // Features NLP
  keywords        String[]
  legalReferences Json?

  // Relations
  alternatives    Alternative[]
  userAnswers     UserAnswer[]
  simulationQuestions SimulationQuestion[]
  aiExplanation   QuestionExplanation?
  chatSessions    UserQuestionChat[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@unique([examId, questionNumber])
  @@index([subject, difficulty])
  @@index([examYear, examPhase])
}

model Alternative {
  id          String   @id @default(cuid())
  questionId  String
  label       String   // A, B, C, D
  text        String   @db.Text
  isCorrect   Boolean

  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]

  @@unique([questionId, label])
  @@index([questionId])
}

// ============================================================================
// USER ANSWERS
// ============================================================================

model UserAnswer {
  id            String    @id @default(cuid())
  userId        String
  questionId    String
  alternativeId String
  simulationId  String?

  isCorrect     Boolean
  timeSpent     Int       // segundos
  confidence    Int?      // 1-5

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  question      Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  alternative   Alternative @relation(fields: [alternativeId], references: [id], onDelete: Cascade)
  simulation    Simulation? @relation(fields: [simulationId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())

  @@index([userId])
  @@index([questionId])
  @@index([simulationId])
  @@index([userId, isCorrect])
}

// ============================================================================
// SIMULATIONS
// ============================================================================

model Simulation {
  id              String           @id @default(cuid())
  userId          String
  type            SimulationType
  status          SimulationStatus @default(IN_PROGRESS)

  totalQuestions  Int
  score           Float?
  timeSpent       Int?             // segundos totais

  // Configuração
  subjects        Subject[]
  targetDifficulty Difficulty?

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions       SimulationQuestion[]
  answers         UserAnswer[]

  startedAt       DateTime         @default(now())
  completedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userId, status])
  @@index([createdAt])
}

model SimulationQuestion {
  id            String     @id @default(cuid())
  simulationId  String
  questionId    String
  order         Int

  simulation    Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)
  question      Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([simulationId, questionId])
  @@index([simulationId])
}

// ============================================================================
// GAMIFICATION
// ============================================================================

model Achievement {
  id          String   @id @default(cuid())
  key         String   @unique  // "FIRST_CORRECT", "STREAK_7", etc
  name        String
  description String
  icon        String
  points      Int

  users       UserAchievement[]

  createdAt   DateTime @default(now())
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
  @@index([userId])
}

// ============================================================================
// STUDY PLANS
// ============================================================================

model StudyPlan {
  id              String   @id @default(cuid())
  userId          String
  name            String
  description     String?

  targetExamDate  DateTime?
  weeklyGoal      Int      // questões por semana
  focusSubjects   Subject[]

  isActive        Boolean  @default(true)

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, isActive])
}

// ============================================================================
// AI EXPLANATIONS & CHAT
// ============================================================================

model QuestionExplanation {
  id              String   @id @default(cuid())
  questionId      String   @unique

  // Explicação gerada pela IA
  explanation     String   @db.Text
  detailedAnswer  String?  @db.Text

  // Referências legais identificadas pela IA
  legalReferences Json?

  // Metadados
  generatedBy     String   // "openai", "manual"
  model           String?  // "gpt-4o-mini"
  qualityScore    Float?   // 0-1 (baseado em feedback dos usuários)
  usageCount      Int      @default(0)

  // Relação
  question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([questionId])
}

model UserQuestionChat {
  id          String   @id @default(cuid())
  userId      String
  questionId  String

  // Conversa (array de mensagens)
  messages    Json     // [{role: "user"|"assistant", content: string, timestamp: string}]

  // Metadados
  messageCount Int     @default(0)
  lastMessage  String? @db.Text

  // Relações
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, questionId])
  @@index([userId])
  @@index([questionId])
}
